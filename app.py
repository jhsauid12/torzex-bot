import os
import json
import random
import asyncio
import threading
import hmac
import hashlib
import requests

from flask import Flask, request
import discord
from discord.ext import commands
from discord import app_commands, Interaction, Member, Object

intents = discord.Intents.all()
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
CONFIG_PATH = "data/config.json"
if not os.path.exists("data"):
    os.makedirs("data")

def load_data():
    if not os.path.exists(CONFIG_PATH):
        return {
            "reaction_roles": {}, 
            "auto_role": None,
            "log_channel": None,
            "nsfw_allowed": [],
            "git_webhooks": {}
        }
    with open(CONFIG_PATH, "r") as f:
        return json.load(f)

def save_data(data):
    with open(CONFIG_PATH, "w") as f:
        json.dump(data, f, indent=4)

bot.data = load_data()

# Auto-role –ø—Ä–∏ –≤—Ö–æ–¥–µ
@bot.event
async def on_member_join(member):
    role_id = bot.data.get("auto_role")
    if role_id:
        role = member.guild.get_role(role_id)
        if role:
            await member.add_roles(role)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.event
async def on_message(message):
    if message.author.bot:
        return
    log_id = bot.data.get("log_channel")
    if log_id:
        log_channel = message.guild.get_channel(log_id)
        if log_channel:
            await log_channel.send(f"üìù `{message.author}`: {message.content}")
    await bot.process_commands(message)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ-—Ä–æ–ª–∏
@tree.command(name="setautorole", description="–ó–∞–¥–∞—Ç—å –∞–≤—Ç–æ-—Ä–æ–ª—å")
@app_commands.checks.has_permissions(administrator=True)
async def set_autorole(interaction: Interaction, role: discord.Role):
    bot.data["auto_role"] = role.id
    save_data(bot.data)
    await interaction.response.send_message(f"‚úÖ –ê–≤—Ç–æ-—Ä–æ–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {role.name}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –ª–æ–≥–æ–≤
@tree.command(name="setlogchannel", description="–ó–∞–¥–∞—Ç—å –∫–∞–Ω–∞–ª –ª–æ–≥–æ–≤")
@app_commands.checks.has_permissions(administrator=True)
async def set_logchannel(interaction: Interaction, channel: discord.TextChannel):
    bot.data["log_channel"] = channel.id
    save_data(bot.data)
    await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –ª–æ–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.name}")

# –ú–æ–¥–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ –¥–ª—è —Ä–µ–∞–∫—Ü–∏–∏-—Ä–æ–ª–µ–π
class ReactionRoleModal(discord.ui.Modal, title="–†–æ–ª—å –ø–æ —Ä–µ–∞–∫—Ü–∏–∏"):
    message_id = discord.ui.TextInput(label="ID —Å–æ–æ–±—â–µ–Ω–∏—è")
    emoji = discord.ui.TextInput(label="–≠–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, üòÄ –∏–ª–∏ <:name:id>)")
    role_id = discord.ui.TextInput(label="ID —Ä–æ–ª–∏")

    async def on_submit(self, interaction: Interaction):
        try:
            msg_id = int(self.message_id.value)
            role_id = int(self.role_id.value)
            emoji = self.emoji.value
        except ValueError:
            await interaction.response.send_message("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", ephemeral=True)
            return

        bot.data["reaction_roles"].setdefault(str(msg_id), {})[emoji] = role_id
        save_data(bot.data)

        channel = interaction.channel
        try:
            msg = await channel.fetch_message(msg_id)
            await msg.add_reaction(emoji)
            await interaction.response.send_message("‚úÖ –†–æ–ª—å –ø–æ —Ä–µ–∞–∫—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", ephemeral=True)
        except:
            await interaction.response.send_message("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.", ephemeral=True)

@tree.command(name="reactionrole", description="–°–æ–∑–¥–∞—Ç—å —Ä–æ–ª—å –ø–æ —Ä–µ–∞–∫—Ü–∏–∏")
@app_commands.checks.has_permissions(administrator=True)
async def reactionrole(interaction: Interaction):
    await interaction.response.send_modal(ReactionRoleModal())

@bot.event
async def on_raw_reaction_add(payload):
    if str(payload.message_id) in bot.data["reaction_roles"]:
        emoji = str(payload.emoji)
        role_id = bot.data["reaction_roles"][str(payload.message_id)].get(emoji)
        if role_id:
            guild = bot.get_guild(payload.guild_id)
            member = guild.get_member(payload.user_id)
            role = guild.get_role(role_id)
            if role:
                await member.add_roles(role)

# –ü–æ–≥–æ–¥–∞
@tree.command(name="weather", description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ")
async def weather(interaction: Interaction, city: str):
    url = f"http://wttr.in/{city}?format=3"
    try:
        res = requests.get(url)
        await interaction.response.send_message(f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {res.text}")
    except:
        await interaction.response.send_message("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã.")

# –ú–µ–º—ã
@tree.command(name="meme", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º")
async def meme(interaction: Interaction):
    res = requests.get("https://meme-api.com/gimme").json()
    await interaction.response.send_message(res["url"])

# –ö–æ—Ç
@tree.command(name="cat", description="–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞")
async def cat(interaction: Interaction):
    res = requests.get("https://api.thecatapi.com/v1/images/search").json()
    await interaction.response.send_message(res[0]["url"])

# –ü—ë—Å
@tree.command(name="dog", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±–∞–∫—É")
async def dog(interaction: Interaction):
    res = requests.get("https://dog.ceo/api/breeds/image/random").json()
    await interaction.response.send_message(res["message"])

# –ú–æ–Ω–µ—Ç–∫–∞
@tree.command(name="coinflip", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
async def coinflip(interaction: Interaction):
    await interaction.response.send_message(random.choice(["–û—Ä–µ–ª", "–†–µ—à–∫–∞"]))

# NSFW toggle
@tree.command(name="nsfw", description="–†–∞–∑—Ä–µ—à–∏—Ç—å/–∑–∞–ø—Ä–µ—Ç–∏—Ç—å 18+ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
@app_commands.checks.has_permissions(administrator=True)
async def nsfw(interaction: Interaction):
    cid = str(interaction.channel_id)
    if cid in bot.data["nsfw_allowed"]:
        bot.data["nsfw_allowed"].remove(cid)
        await interaction.response.send_message("üîû NSFW –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
    else:
        bot.data["nsfw_allowed"].append(cid)
        await interaction.response.send_message("‚úÖ NSFW –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.")
    save_data(bot.data)

# NSFW –∫–æ–Ω—Ç–µ–Ω—Ç
@tree.command(name="hentai", description="–ü–æ–∫–∞–∑–∞—Ç—å —Ö–µ–Ω—Ç–∞–π (NSFW)")
async def hentai(interaction: Interaction):
    if str(interaction.channel_id) not in bot.data["nsfw_allowed"]:
        await interaction.response.send_message("‚ùå NSFW –∑–∞–ø—Ä–µ—â—ë–Ω –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.", ephemeral=True)
        return
    res = requests.get("https://nekos.life/api/v2/img/hentai").json()
    await interaction.response.send_message(res["url"])

# GitHub webhook —Å–æ–∑–¥–∞–Ω–∏–µ
@tree.command(name="setgitwebhook", description="–°–æ–∑–¥–∞—Ç—å GitHub webhook")
@app_commands.checks.has_permissions(administrator=True)
async def set_git_webhook(interaction: Interaction, repo: str, secret: str):
    bot.data["git_webhooks"][repo] = {
        "secret": secret,
        "channel_id": interaction.channel_id
    }
    save_data(bot.data)
    url = f"https://<your-domain>/webhook/{repo.replace('/', '_')}"
    await interaction.response.send_message(
        f"‚úÖ Webhook –¥–ª—è `{repo}` —Å–æ–∑–¥–∞–Ω.\n"
        f"üîë Secret: `{secret}`\n"
        f"üåê URL: `{url}`", ephemeral=True)

# Flask GitHub webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
app = Flask(__name__)

@app.route("/webhook/<repo_name>", methods=["POST"])
def github_webhook(repo_name):
    repo = repo_name.replace("_", "/")
    if repo not in bot.data["git_webhooks"]:
        return "Unknown repo", 404

    data = bot.data["git_webhooks"][repo]
    secret = data["secret"]
    sig_header = request.headers.get("X-Hub-Signature-256")

    if not sig_header:
        return "Forbidden", 403

    sha_name, signature = sig_header.split("=")
    mac = hmac.new(secret.encode(), msg=request.data, digestmod=hashlib.sha256)
    if not hmac.compare_digest(mac.hexdigest(), signature):
        return "Invalid signature", 403

    payload = request.json
    repo_name = payload["repository"]["full_name"]
    pusher = payload["pusher"]["name"]
    commits = payload["commits"]

    commit_text = "\n".join([f"- [{c['id'][:7]}] {c['message']} by {c['author']['name']}" for c in commits])
    text = f"üì¶ `{repo_name}`: –∫–æ–º–º–∏—Ç—ã –æ—Ç **{pusher}**\n{commit_text}"

    asyncio.run_coroutine_threadsafe(
        send_git_message(data["channel_id"], text),
        bot.loop
    )

    return "OK", 200

async def send_git_message(channel_id, message):
    channel = bot.get_channel(channel_id)
    if channel:
        await channel.send(message)

# Flask –∑–∞–ø—É—Å–∫
def run_flask():
    app.run(host="0.0.0.0", port=8080)

flask_thread = threading.Thread(target=run_flask)
flask_thread.start()

# –ó–∞–ø—É—Å–∫ Discord-–±–æ—Ç–∞
TOKEN = os.getenv("DISCORD_BOT_TOKEN")
if not TOKEN:
    print("‚ùå DISCORD_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω.")
else:
    bot.run(TOKEN)
