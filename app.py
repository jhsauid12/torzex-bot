import os
import discord
from discord.ext import commands
from discord import ui
from flask import Flask, render_template, request, redirect
import threading
import asyncio

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.reactions = True
intents.members = True
intents.guild_messages = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
bot.reaction_roles = {}
channels_by_category = {}

# –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
@bot.event
async def on_ready():
    print(f"–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    try:
        await bot.tree.sync()
        print("–°–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    guild_id = os.getenv("DISCORD_GUILD_ID")
    if guild_id:
        guild = bot.get_guild(int(guild_id))
        if guild:
            for category in guild.categories:
                channels_by_category[category.name] = [channel for channel in category.text_channels]

# –ü—Ä–µ—Ñ–∏–∫—Å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (—Ä–∞–±–æ—á–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
@bot.command()
@commands.has_permissions(administrator=True)
async def reactionrole(ctx, message_id: int, emoji: str, role: discord.Role):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ä–æ–ª–∏: !reactionrole <message_id> <emoji> <role>"""
    try:
        message = await ctx.channel.fetch_message(message_id)
        await message.add_reaction(emoji)
        bot.reaction_roles[(message_id, str(emoji))] = role.id
        await ctx.send(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ! –†–µ–∞–∫—Ü–∏—è {emoji} —Ç–µ–ø–µ—Ä—å –≤—ã–¥–∞–µ—Ç —Ä–æ–ª—å {role.name}")
    except Exception as e:
        await ctx.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ö–ª–∞—Å—Å –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥)
class ReactionRoleModal(ui.Modal, title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ä–æ–ª–∏"):
    message_id = ui.TextInput(label="ID —Å–æ–æ–±—â–µ–Ω–∏—è", placeholder="123456789012345678")
    emoji = ui.TextInput(label="–≠–º–æ–¥–∑–∏", placeholder="üéâ –∏–ª–∏ :thumbsup:")
    role_id = ui.TextInput(label="ID —Ä–æ–ª–∏", placeholder="123456789012345678")

    async def on_submit(self, interaction: discord.Interaction):
        try:
            message_id = int(self.message_id.value)
            emoji = self.emoji.value
            role_id = int(self.role_id.value)
            
            channel = interaction.channel
            message = await channel.fetch_message(message_id)
            await message.add_reaction(emoji)
            
            bot.reaction_roles[(message_id, emoji)] = role_id
            await interaction.response.send_message(
                f"‚úÖ –†–µ–∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message_id}\n"
                f"–≠–º–æ–¥–∑–∏: {emoji}\n"
                f"–†–æ–ª—å: <@&{role_id}>",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

# –°–ª–µ—à-–∫–æ–º–∞–Ω–¥–∞ —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
@bot.tree.command(name="reactionrole", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π")
@discord.app_commands.default_permissions(administrator=True)
async def reactionrole_slash(interaction: discord.Interaction):
    await interaction.response.send_modal(ReactionRoleModal())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return
    
    key = (payload.message_id, str(payload.emoji))
    if key in bot.reaction_roles:
        guild = bot.get_guild(payload.guild_id)
        role = guild.get_role(bot.reaction_roles[key])
        member = guild.get_member(payload.user_id)
        if role and member:
            await member.add_roles(role)

@bot.event
async def on_raw_reaction_remove(payload):
    key = (payload.message_id, str(payload.emoji))
    if key in bot.reaction_roles:
        guild = bot.get_guild(payload.guild_id)
        role = guild.get_role(bot.reaction_roles[key])
        member = guild.get_member(payload.user_id)
        if role and member:
            await member.remove_roles(role)

# –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
@app.route("/")
def index():
    return render_template("index.html", channels=channels_by_category)

@app.route("/send", methods=["POST"])
def send_message():
    try:
        channel_id = int(request.form["channel"])
        message = request.form["message"]
        image_url = request.form.get("image_url", "")
        button_label = request.form.get("button_label", "")
        button_url = request.form.get("button_url", "")

        async def send_discord_message():
            channel = bot.get_channel(channel_id)
            if not channel:
                return
            
            embed = None
            if image_url:
                embed = discord.Embed()
                embed.set_image(url=image_url)
            
            view = None
            if button_label and button_url:
                view = discord.ui.View()
                view.add_item(discord.ui.Button(label=button_label, url=button_url))
            
            await channel.send(content=message, embed=embed, view=view)

        asyncio.run_coroutine_threadsafe(send_discord_message(), bot.loop)
        return redirect("/")
    except Exception as e:
        return f"–û—à–∏–±–∫–∞: {e}", 500

# –ó–∞–ø—É—Å–∫
def run_flask():
    app.run(host="0.0.0.0", port=5000)

def run_bot():
    TOKEN = os.getenv("DISCORD_TOKEN")
    if not TOKEN:
        print("‚ùå –¢–æ–∫–µ–Ω Discord –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    bot.run(TOKEN)

if __name__ == "__main__":
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    run_bot()