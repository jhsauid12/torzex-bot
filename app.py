import os
import discord
import json
import random
import asyncio
import aiohttp
from discord.ext import commands
from discord import app_commands
from flask import Flask
import threading
import hmac
import hashlib
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Discord –±–æ—Ç–∞
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.reactions = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents, help_command=None)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG_FILE = "config.json"

def load_data():
    try:
        with open(CONFIG_FILE, "r") as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {
            "reaction_roles": {},
            "auto_roles": [],
            "nsfw_channels": [],
            "notification_channels": {},
            "git_webhooks": {}
        }

def save_data(data):
    with open(CONFIG_FILE, "w") as f:
        json.dump(data, f, indent=4)

bot.data = load_data()

# –°–æ–±—ã—Ç–∏—è
@bot.event
async def on_ready():
    print(f"Bot {bot.user} is ready!")
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="/help"))

# Help Command
@bot.tree.command(name="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥")
async def help_command(interaction: discord.Interaction):
    embed = discord.Embed(title="üìö –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", color=0x00ff00)
    
    embed.add_field(
        name="üé≠ Reaction Roles",
        value="`/reaction_role` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º",
        inline=False
    )
    
    embed.add_field(
        name="üå§ –ü–æ–≥–æ–¥–∞",
        value="`/weather [–≥–æ—Ä–æ–¥]` - –£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É",
        inline=False
    )
    
    embed.add_field(
        name="üòÇ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
        value="`/meme` - –°–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
              "`/coinflip` - –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É\n"
              "`/cat` - –°–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç–∏–∫\n"
              "`/dog` - –°–ª—É—á–∞–π–Ω—ã–π –ø—ë—Å–∏–∫",
        inline=False
    )
    
    embed.add_field(
        name="üîû NSFW (18+)",
        value="`/nsfw_setup` - –í–∫–ª—é—á–∏—Ç—å NSFW –≤ —Ç–µ–∫—É—â–µ–º –∫–∞–Ω–∞–ª–µ\n"
              "`/nsfw [–∫–∞—Ç–µ–≥–æ—Ä–∏—è]` - NSFW –∫–æ–Ω—Ç–µ–Ω—Ç",
        inline=False
    )
    
    embed.add_field(
        name="üë• –ê–≤—Ç–æ-—Ä–æ–ª–∏",
        value="`/autorole_add` - –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ-—Ä–æ–ª—å\n"
              "`/autorole_remove` - –£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ-—Ä–æ–ª—å",
        inline=False
    )
    
    embed.add_field(
        name="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        value="`/git_setup` - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Git\n"
              "`/git_webhook` - –°–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed)

# –ü–æ–≥–æ–¥–∞
@bot.tree.command(name="weather", description="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ")
@app_commands.describe(city="–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
async def weather(interaction: discord.Interaction, city: str):
    await interaction.response.defer()
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"https://geocoding-api.open-meteo.com/v1/search?name={city}&count=1&language=ru"
            ) as resp:
                geo_data = await resp.json()
                
            if not geo_data.get("results"):
                return await interaction.followup.send(f"‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
            
            location = geo_data["results"][0]
            lat, lon = location["latitude"], location["longitude"]
            
            async with session.get(
                f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}"
                f"&current_weather=true&hourly=temperature_2m&daily=weathercode,temperature_2m_max,temperature_2m_min"
                f"&timezone=auto&windspeed_unit=ms"
            ) as resp:
                weather_data = await resp.json()
        
        current = weather_data["current_weather"]
        daily = weather_data["daily"]
        
        weather_codes = {
            0: "–Ø—Å–Ω–æ ‚òÄÔ∏è", 1: "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ —è—Å–Ω–æ üå§", 2: "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å ‚õÖ",
            3: "–ü–∞—Å–º—É—Ä–Ω–æ ‚òÅÔ∏è", 45: "–¢—É–º–∞–Ω üå´", 48: "–ò–Ω–µ–π üå´",
            51: "–ú–æ—Ä–æ—Å—å üåß", 53: "–£–º–µ—Ä–µ–Ω–Ω–∞—è –º–æ—Ä–æ—Å—å üåß", 55: "–°–∏–ª—å–Ω–∞—è –º–æ—Ä–æ—Å—å üåß",
            61: "–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å üåß", 63: "–£–º–µ—Ä–µ–Ω–Ω—ã–π –¥–æ–∂–¥—å üåß", 65: "–°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å üåß",
            71: "–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥ ‚ùÑÔ∏è", 73: "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è", 75: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥ ‚ùÑÔ∏è",
            80: "–õ–∏–≤–µ–Ω—å üåß", 81: "–°–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß", 82: "–û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –ª–∏–≤–µ–Ω—å üåß",
            85: "–°–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è", 86: "–°–∏–ª—å–Ω—ã–π —Å–Ω–µ–≥–æ–ø–∞–¥ ‚ùÑÔ∏è", 95: "–ì—Ä–æ–∑–∞ ‚ö°"
        }
        
        embed = discord.Embed(
            title=f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {location['name']}, {location.get('admin1', '')}",
            color=0x00ffff
        )
        embed.add_field(name="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", value=f"{current['temperature']}¬∞C", inline=True)
        embed.add_field(name="üí® –í–µ—Ç–µ—Ä", value=f"{current['windspeed']} –º/—Å", inline=True)
        embed.add_field(name="‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ", value=weather_codes.get(current['weathercode'], "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"), inline=True)
        embed.add_field(name="‚¨ÜÔ∏è –ú–∞–∫—Å–∏–º—É–º", value=f"{daily['temperature_2m_max'][0]}¬∞C", inline=True)
        embed.add_field(name="‚¨áÔ∏è –ú–∏–Ω–∏–º—É–º", value=f"{daily['temperature_2m_min'][0]}¬∞C", inline=True)
        
        await interaction.followup.send(embed=embed)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# Reaction Roles
class RoleModal(discord.ui.Modal, title="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∞–∫—Ü–∏–æ–Ω–Ω–æ–π —Ä–æ–ª–∏"):
    message_id = discord.ui.TextInput(label="ID —Å–æ–æ–±—â–µ–Ω–∏—è")
    emoji = discord.ui.TextInput(label="–≠–º–æ–¥–∑–∏")
    role = discord.ui.TextInput(label="ID —Ä–æ–ª–∏")

    async def on_submit(self, interaction: discord.Interaction):
        try:
            message = await interaction.channel.fetch_message(int(self.message_id.value))
            await message.add_reaction(self.emoji.value)
            bot.data["reaction_roles"][f"{self.message_id.value}-{self.emoji.value}"] = int(self.role.value)
            save_data(bot.data)
            
            await interaction.response.send_message(
                f"‚úÖ –†–µ–∞–∫—Ü–∏–æ–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ: {self.message_id.value}\n"
                f"–≠–º–æ–¥–∑–∏: {self.emoji.value}\n"
                f"–†–æ–ª—å: <@&{self.role.value}>",
                ephemeral=True
            )
        except Exception as e:
            await interaction.response.send_message(f"‚ùå –û—à–∏–±–∫–∞: {e}", ephemeral=True)

@bot.tree.command(name="reaction_role", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π –ø–æ —Ä–µ–∞–∫—Ü–∏—è–º")
@app_commands.default_permissions(administrator=True)
async def reaction_role(interaction: discord.Interaction):
    await interaction.response.send_modal(RoleModal())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return
    
    key = f"{payload.message_id}-{payload.emoji}"
    if key in bot.data["reaction_roles"]:
        guild = bot.get_guild(payload.guild_id)
        role = guild.get_role(bot.data["reaction_roles"][key])
        member = guild.get_member(payload.user_id)
        if role and member:
            await member.add_roles(role)

@bot.event
async def on_raw_reaction_remove(payload):
    key = f"{payload.message_id}-{payload.emoji}"
    if key in bot.data["reaction_roles"]:
        guild = bot.get_guild(payload.guild_id)
        role = guild.get_role(bot.data["reaction_roles"][key])
        member = guild.get_member(payload.user_id)
        if role and member:
            await member.remove_roles(role)

# –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@bot.tree.command(name="meme", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º")
@app_commands.describe(category="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–º–∞")
@app_commands.choices(category=[
    app_commands.Choice(name="Random", value="random"),
    app_commands.Choice(name="Funny", value="funny"),
    app_commands.Choice(name="Dank", value="dank"),
    app_commands.Choice(name="Wholesome", value="wholesome")
])
async def meme(interaction: discord.Interaction, category: app_commands.Choice[str]):
    await interaction.response.defer()
    try:
        url = f"https://meme-api.com/gimme/{category.value}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as resp:
                data = await resp.json()
        
        embed = discord.Embed(title=data["title"], color=0xff9900)
        embed.set_image(url=data["url"])
        embed.set_footer(text=f"üëç {data['ups']} | r/{data['subreddit']}")
        await interaction.followup.send(embed=embed)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.tree.command(name="coinflip", description="–ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É")
async def coinflip(interaction: discord.Interaction):
    await interaction.response.send_message(f"üé≤ {random.choice(['–û—Ä—ë–ª', '–†–µ—à–∫–∞'])}!")

@bot.tree.command(name="cat", description="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞")
async def cat(interaction: discord.Interaction):
    await interaction.response.defer()
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://api.thecatapi.com/v1/images/search") as resp:
                data = await resp.json()
        await interaction.followup.send(data[0]["url"])
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

@bot.tree.command(name="dog", description="–°–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ —Å–æ–±–∞–∫–∏")
async def dog(interaction: discord.Interaction):
    await interaction.response.defer()
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get("https://dog.ceo/api/breeds/image/random") as resp:
                data = await resp.json()
        await interaction.followup.send(data["message"])
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ê–≤—Ç–æ-—Ä–æ–ª–∏
@bot.tree.command(name="autorole_add", description="–î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏")
@app_commands.default_permissions(administrator=True)
async def add_autorole(interaction: discord.Interaction, role: discord.Role):
    if role.id not in bot.data["auto_roles"]:
        bot.data["auto_roles"].append(role.id)
        save_data(bot.data)
        await interaction.response.send_message(f"‚úÖ –ê–≤—Ç–æ-—Ä–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞: {role.mention}")
    else:
        await interaction.response.send_message(f"‚Ñπ –†–æ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ-—Ä–æ–ª—å—é: {role.mention}")

@bot.tree.command(name="autorole_remove", description="–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å –∏–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏")
@app_commands.describe(role="–†–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
@app_commands.default_permissions(administrator=True)
async def remove_autorole(interaction: discord.Interaction, role: discord.Role):
    if role.id in bot.data["auto_roles"]:
        bot.data["auto_roles"].remove(role.id)
        save_data(bot.data)
        await interaction.response.send_message(f"‚úÖ –ê–≤—Ç–æ-—Ä–æ–ª—å —É–¥–∞–ª–µ–Ω–∞: {role.mention}")
    else:
        await interaction.response.send_message(f"‚Ñπ –†–æ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ-—Ä–æ–ª—å—é: {role.mention}")

@bot.event
async def on_member_join(member):
    for role_id in bot.data["auto_roles"]:
        role = member.guild.get_role(role_id)
        if role:
            await member.add_roles(role)

# NSFW
@bot.tree.command(name="nsfw_setup", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª –∫–∞–∫ NSFW")
@app_commands.default_permissions(administrator=True)
async def setup_nsfw(interaction: discord.Interaction):
    if interaction.channel.id not in bot.data["nsfw_channels"]:
        bot.data["nsfw_channels"].append(interaction.channel.id)
        save_data(bot.data)
        await interaction.response.send_message("‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–∫ NSFW")
    else:
        await interaction.response.send_message("‚Ñπ –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª —É–∂–µ NSFW")

@bot.tree.command(name="nsfw", description="NSFW –∫–æ–Ω—Ç–µ–Ω—Ç (18+)")
@app_commands.describe(category="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
@app_commands.choices(category=[
    app_commands.Choice(name="Neko", value="neko"),
    app_commands.Choice(name="Hentai", value="hentai"),
    app_commands.Choice(name="Boobs", value="boobs")
])
async def nsfw_content(interaction: discord.Interaction, category: app_commands.Choice[str]):
    if interaction.channel.id not in bot.data["nsfw_channels"]:
        return await interaction.response.send_message("‚ùå –≠—Ç–æ –Ω–µ NSFW –∫–∞–Ω–∞–ª!", ephemeral=True)
    
    await interaction.response.defer()
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.waifu.pics/nsfw/{category.value}") as resp:
                data = await resp.json()
        
        embed = discord.Embed(color=0xff69b4)
        embed.set_image(url=data["url"])
        await interaction.followup.send(embed=embed)
    except Exception as e:
        await interaction.followup.send(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# Git —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@bot.tree.command(name="git_setup", description="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Git")
@app_commands.describe(channel="–ö–∞–Ω–∞–ª –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
@app_commands.default_permissions(administrator=True)
async def setup_git(interaction: discord.Interaction, channel: discord.TextChannel):
    bot.data["notification_channels"]["git"] = channel.id
    save_data(bot.data)
    await interaction.response.send_message(f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è Git-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {channel.mention}")

@bot.tree.command(name="git_webhook", description="–°–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
@app_commands.describe(repo="–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è (owner/repo)")
@app_commands.default_permissions(administrator=True)
async def create_webhook(interaction: discord.Interaction, repo: str):
    if "git" not in bot.data["notification_channels"]:
        return await interaction.response.send_message(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /git_setup",
            ephemeral=True
        )
    
    secret = os.urandom(16).hex()
    bot.data["git_webhooks"][repo] = {
        "secret": secret,
        "channel_id": bot.data["notification_channels"]["git"]
    }
    save_data(bot.data)
    
    embed = discord.Embed(title="üîî Git Webhook", color=0x7289da)
    embed.add_field(name="Repository", value=repo, inline=False)
    embed.add_field(name="Secret", value=f"`{secret}`", inline=False)
    embed.add_field(
        name="Webhook URL", 
        value=f"`{os.getenv('WEBHOOK_URL', 'https://your-render-url.onrender.com')}/webhook/git`", 
        inline=False
    )
    embed.add_field(
        name="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", 
        value="1. Go to repository Settings\n"
              "2. Open Webhooks section\n"
              "3. Add new webhook with provided URL and Secret\n"
              "4. Select events: Push, Pull Request, Releases",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Git
@app.route('/webhook/git', methods=['POST'])
def handle_git_webhook():
    try:
        signature = request.headers.get('X-Hub-Signature-256', '')
        if not signature:
            return "No signature", 400
        
        repo = request.json['repository']['full_name']
        if repo not in bot.data["git_webhooks"]:
            return "Repository not configured", 404
        
        secret = bot.data["git_webhooks"][repo]["secret"]
        channel_id = bot.data["git_webhooks"][repo]["channel_id"]
        
        # Verify signature
        body = request.data
        hash_object = hmac.new(secret.encode(), body, hashlib.sha256)
        expected_signature = "sha256=" + hash_object.hexdigest()
        
        if not hmac.compare_digest(signature, expected_signature):
            return "Invalid signature", 403
        
        event = request.headers.get('X-GitHub-Event', '')
        data = request.json
        
        # Format message
        message = None
        if event == "push":
            commits = data['commits']
            if commits:
                message = (
                    f"üî® **New push to {repo}**\n"
                    f"Author: {data['pusher']['name']}\n"
                    f"Branch: {data['ref'].split('/')[-1]}\n"
                    f"Commits: {len(commits)}\n"
                    f"Last: {commits[-1]['message']}\n"
                    f"[View changes]({data['compare']})"
                )
        
        elif event == "pull_request":
            pr = data['pull_request']
            action = data['action']
            message = (
                f"üîÑ **PR {action} in {repo}**\n"
                f"Title: {pr['title']}\n"
                f"Author: {pr['user']['login']}\n"
                f"Branches: {pr['head']['ref']} ‚Üí {pr['base']['ref']}\n"
                f"[View PR]({pr['html_url']})"
            )
        
        elif event == "release":
            release = data['release']
            message = (
                f"üéâ **New release {release['tag_name']} in {repo}**\n"
                f"Name: {release['name']}\n"
                f"Author: {release['author']['login']}\n"
                f"[Download]({release['html_url']})"
            )
        
        if message:
            async def send_notification():
                channel = bot.get_channel(channel_id)
                if channel:
                    await channel.send(message)
            
            asyncio.run_coroutine_threadsafe(send_notification(), bot.loop)
        
        return "OK", 200
    except Exception as e:
        print(f"Git webhook error: {e}")
        return "Error", 500

# –ó–∞–ø—É—Å–∫
def run_flask():
    app.run(host="0.0.0.0", port=5000, debug=False, use_reloader=False)

if __name__ == "__main__":
    os.makedirs("data", exist_ok=True)
    os.makedirs("templates", exist_ok=True)
    
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.daemon = True
    flask_thread.start()
    
    TOKEN = os.getenv("DISCORD_TOKEN")
    if not TOKEN:
        print("‚ùå Discord token not found!")
    else:
        bot.run(TOKEN)